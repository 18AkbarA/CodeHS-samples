

public class Grid
{
    // Write your Grid class here
    
	/* Consider the grid like a coordinate system (or a graph)
	
	it should be a 10 x 10 grid, essentially going from 1-10 on the x axis (row number) and y-axis(column number)
	
	Each location will be represented as (row,col)
	*/
	
	
	
    private Location[][] grid = new Location[10][10];
    public int twoshipnumb = 0;
    public int threeshipnumb = 0;
    public int fourshipnumb = 0;
    public int fiveshipnumb = 0;
    // Constants for number of rows and columns.
    public static final int NUM_ROWS = 10;
    public static final int NUM_COLS = 10;
    
    public int totalShips = 0;
    
    public boolean shipWasAdded = true;
    //public int totalOpponentShips = 0;
    
    
    public boolean showOutput = true;

    public void displayText(String text){
    	if(showOutput == true){
    		System.out.println(text);
    	}
    }
    public void displayTextInline(String text){
    	if(showOutput == true){
    		System.out.print(text);
    	}
    }
    
    
	//Creates the grid and sets a location to every space;
    public Grid(){
        for(int row = 0; row < NUM_ROWS; row++){
            for(int col = 0; col < NUM_COLS; col++){
                Location square = new Location();
                
                grid[row][col] = square;
            }
        }
        
    }
    
	
	/* Whenever you see the following if statement:
	
	        if (row > 9 || col > 9){
				displayText("Parameters must be less than 9");
			}
		it's for checking to make sure the grid square actually exists
	*/
	
	//Marks the selected square with a hit
    public void markHit(int row, int col){
        if (row > 9 || col > 9){
            displayText("Parameters must be less than 9");
        }
        
        else{
            Location theSpot = grid[row][col];
            theSpot.markHit();
        }
    }
	
    //Marks the selected square with a miss
    public void markMiss(int row, int col){
        if (row > 9 || col > 9){
            displayText("Parameters must be less than 9");
        }
        
        else{
            Location theSpot = grid[row][col];
            theSpot.markMiss();
        }
    }
    
	//Sets the selected square's status
    public void setStatus(int row, int col, int status){
        if (row > 9 || col > 9){
            displayText("Parameters must be less than 9");
        }
        else{
            Location theSpot = grid[row][col];
            theSpot.setStatus(status); 
        }
    }
    
	//Returns the selected square's status
    public int getStatus(int row, int col){
        if (row > 9 || col > 9){
            displayText("Parameters must be less than 9");
            return 0;
        }
        else{
            Location theSpot = grid[row][col];
             return theSpot.getStatus();   
        }
    }
    
	//Sets a ship in the selected square
    public void setShip(int row, int col, boolean val){
        if (row > 9 || col > 9){
            displayText("Parameters must be less than 9");
        }
        else{
            Location theSpot = grid[row][col];
            theSpot.setShip(val);   
        }
        
        
    }
	
	
	//checks if the square is alreadyGuessed (returns opposite of square.isUnguessed())
    public boolean alreadyGuessed(int row, int col){
        Location theSpot = grid[row][col];
        
        return theSpot.isUnguessed() == false;
        
    }
	//Check if the selected square has a ship
    public boolean hasShip(int row, int col){
        if (row > 9 || col > 9){
            displayText("Parameters must be less than 9");
            return false;
        }
        else{
            Location theSpot = grid[row][col];
            return theSpot.hasShip();   
        }
    }
    
	//Returns the location associated with the selected grid space
    public Location get(int row, int col){
        return grid[row][col];
    }
    
	//returns the number of rows in the grid
    public int numRows(){
        return NUM_ROWS;
    }
	
	
    //returns the number of columns in the grid
    public int numCols(){
        return NUM_COLS;
    }
    
    public void printStatus(){

	
		//Prints out the numbers on the top of the grid
        displayTextInline(" ");
        for(int i = 1; i < 11; i++){
            displayTextInline(" " + i );
        }
        
        displayTextInline("\n");
        
        for (int i = 0; i < NUM_ROWS; i++){
			//prints out the letters at the sides of the grid
            char startingchar = (char)(i + 65);
            displayTextInline(startingchar + "");
            for (int l = 0; l < NUM_COLS; l++){
                
                Location theSquare = grid[i][l];
                int status = theSquare.getStatus();
                
				
				//prints out the status for each
                if (status == 0){
                    displayTextInline(" -");
                }
                else if (status == 1){
                    displayTextInline(" X");
                }
                else{
                    displayTextInline(" O");
                }
                
            }
            displayTextInline(" \n");
        }
        
    }
    
    public void printShips(){
        
        displayTextInline(" ");
        for(int i = 1; i < 11; i++){
            displayTextInline(" " + i);
        }
        
        displayTextInline("\n");
        
        for (int i = 0; i < 10; i++){
            char startingchar = (char)(i + 65);
            displayTextInline(""+startingchar);
            for (int l = 0; l < 10; l++){
                
                Location theSquare = grid[i][l];
                boolean status = theSquare.hasShip();
                //int status = 0;
                if (status){
                    displayTextInline(" X");
                }
                else{
                    displayTextInline(" -");
                }
                
            }
            displayTextInline(" \n");
        }
        
    }
    
    
    
    
    
    
    public void addShip(Ship s){
        int shipLength = s.getLength();
        int shipDirection = s.getDirection();
        //displayText(s.isLocationSet());
        if (s.shipSet == false){
            boolean setShip = true;
        
            //Test if the ship will be placed on another ship
            if (shipDirection == 0){
                    if(s.getCol() + shipLength > (NUM_COLS)){
                        //displayText("WARNING: The ship sticks off the grid!");
                    }
                    
                else{
                    for(int i = 0; i < shipLength; i ++){
                    	if (i + s.getCol() < 10){
                        Location shipLocation = grid[s.getRow()][s.getCol() + i];
                        if(shipLocation.hasShip()){
                            displayText("A Ship already exists on one of those spaces!");
                            setShip = false;
                        }
                    	}
                    }   
                }
            }
        
            else if (shipDirection == 1){
                if(s.getRow() + shipLength > (NUM_ROWS)){
                    //displayText("WARNING: The ship sticks off the grid!");
                }
                else{
                    for(int i = 0; i < shipLength; i ++){
                    

                    	if (i + s.getRow() < 10){
                        Location shipLocation = grid[s.getRow() + i][s.getCol()];
                        if(shipLocation.hasShip()){
                            displayText("WARNING: A Ship already exists on one of those spaces!");
                            setShip = false;
                        }
                    	}
                    }
                }
            }
        
            if(shipDirection == 0 && s.getCol() + s.getLength() < 11 && setShip){
                
                for(int i = 0; i < shipLength; i ++){
                	
                    Location shipLocation = grid[s.getRow()][s.getCol() + i];
                    shipLocation.setShip(true);
                    s.shipSet = true;
                	
                    
                }
                displayText("Ship successfully added!");
                totalShips++;
                if(shipLength == 2){
                        twoshipnumb++;
                    }
                    else if(shipLength == 3){
                        threeshipnumb++;
                    }
                    else if (shipLength == 4){
                        fourshipnumb++;
                    }
                    else if (shipLength == 5){
                        fiveshipnumb++;
                    }
            }
        
            else if(shipDirection == 1 && s.getRow() + s.getLength() < 11 && setShip){
                
                for(int i = 0; i < shipLength; i ++){
                	
                    Location shipLocation = grid[s.getRow() + i][s.getCol()];
                    shipLocation.setShip(true);
                    s.shipSet = true;
                	
                    
                }
                displayText("Ship successfully added!");
                    totalShips++;
                    
                    if(shipLength == 2){
                        twoshipnumb++;
                    }
                    else if(shipLength == 3){
                        threeshipnumb++;
                    }
                    else if (shipLength == 4){
                        fourshipnumb++;
                    }
                    else if (shipLength == 5){
                        fiveshipnumb++;
                    }
            }
            else if (setShip != false){
                displayText("WARNING: Your ship sticks off the grid!");

            }
            else{
            
            }
        }
        else{
            displayText("WARNING: That ship's location is already set!");
        }
        
    }
    
    

    
    
    
}
